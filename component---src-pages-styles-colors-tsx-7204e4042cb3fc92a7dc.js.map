{"version":3,"sources":["webpack:///./src/config/sidenav/styles.js","webpack:///./src/pages/styles/colors.tsx"],"names":["t","title","icon","items","to","showAsTo","label","colorTokens","suomifiDesignTokens","colors","depthLight1","undefined","borderForLightColor","Object","entries","reduce","obj","key","value","name","border","getLuminance","colorCategories","id","blackBase","blackLight1","depthBase","depthDark1","brandBase","highlightBase","highlightLight1","highlightLight2","highlightLight3","highlightDark1","depthLight2","accentBase","accentTertiaryDark1","whiteBase","depthLight3","highlightLight4","depthSecondary","depthSecondaryDark1","successBase","successSecondary","warningBase","alertBase","alertLight1","accentSecondary","accentSecondaryLight1","accentTertiary","withI18next","ns","sideNavData","h1","lead","map","section","index","mainTitle","paragraphs","links","item","description","exampleFirst","noCode","style","padding","justifyContent","background","color","margin","spacing","s","l","lineHeight","width","height","marginBottom","m","fontSize","query"],"mappings":"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","file":"component---src-pages-styles-colors-tsx-7204e4042cb3fc92a7dc.js","sourcesContent":["import React from 'react';\nimport { StaticIcon } from 'suomifi-ui-components';\n\nexport default t => ({\n  title: t('styles:title'),\n  icon: <StaticIcon icon=\"magicWand\" />,\n  items: [\n    {\n      to: '/styles/',\n      showAsTo: '/styles/info/',\n      label: t('styles:info.title'),\n    },\n    { to: '/styles/icons/', label: t('icons:title') },\n    { to: '/styles/typography/', label: t('typography:title') },\n    { to: '/styles/colors/', label: t('colors:title') },\n  ],\n});\n","import React, { CSSProperties } from 'react';\nimport { graphql } from 'gatsby';\nimport { NamespacesConsumer } from 'react-i18next';\nimport { withI18next } from '@wapps/gatsby-plugin-i18next';\nimport { suomifiDesignTokens } from 'suomifi-ui-components';\nimport { getLuminance } from 'polished';\n\nimport Layout from 'components/layout';\nimport SEO from 'components/seo';\nimport ComponentDescription from 'components/ComponentDescription';\nimport sideNavData from 'config/sidenav/styles';\nimport NoteBox from 'components/NoteBox';\nimport Section from 'components/Section';\nimport ComponentExample from 'components/ComponentExample';\nimport { Heading, Text, Paragraph } from 'components/ResponsiveComponents';\n\nconst colorTokens =\n  !!suomifiDesignTokens && !!suomifiDesignTokens.colors\n    ? suomifiDesignTokens.colors\n    : { depthLight1: undefined };\n\nconst borderForLightColor = `1px solid ${colorTokens.depthLight1}`;\n\ntype ColorKeys = keyof typeof suomifiDesignTokens.colors;\ninterface ColorItem {\n  name: string;\n  value: string;\n  border: string;\n}\ntype colorTypes = { [key in ColorKeys]?: ColorItem };\nconst colors: colorTypes = Object.entries(colorTokens).reduce(\n  (obj, [key, value]: [ColorKeys, string]) => ({\n    ...obj,\n    [key]: {\n      name: key,\n      value,\n      border:\n        getLuminance(value) > getLuminance('#f8f8f8')\n          ? borderForLightColor\n          : '0',\n    },\n  }),\n  {},\n);\n\nconst colorCategories = [\n  {\n    id: 'textColors',\n    colors: [\n      colors.blackBase,\n      colors.blackLight1,\n      colors.depthBase,\n      colors.depthDark1,\n    ],\n  },\n  { id: 'brandColors', colors: [colors.brandBase] },\n  {\n    id: 'controlColors',\n    colors: [\n      colors.highlightBase,\n      colors.highlightLight1,\n      colors.highlightLight2,\n      colors.highlightLight3,\n      colors.highlightDark1,\n      colors.depthBase,\n      colors.depthLight2,\n      colors.depthDark1,\n      colors.accentBase,\n      colors.accentTertiaryDark1,\n    ],\n  },\n  {\n    id: 'iconColors',\n    colors: [colors.accentBase, colors.depthBase, colors.depthDark1],\n  },\n  {\n    id: 'backgroundColors',\n    colors: [\n      colors.whiteBase,\n      colors.depthLight3,\n      colors.depthLight1,\n      colors.highlightLight2,\n      colors.highlightLight3,\n      colors.highlightLight4,\n      colors.depthSecondary,\n      colors.depthSecondaryDark1,\n    ],\n  },\n  {\n    id: 'trafficColors',\n    colors: [\n      colors.successBase,\n      colors.successSecondary,\n      colors.warningBase,\n      colors.alertBase,\n      colors.alertLight1,\n    ],\n  },\n  {\n    id: 'accentColors',\n    colors: [\n      colors.accentBase,\n      colors.accentSecondary,\n      colors.accentSecondaryLight1,\n      colors.accentTertiary,\n    ],\n  },\n];\n\nconst getExampleColor = (\n  id: string,\n  name: string,\n  value: string,\n  label: string,\n  style?: CSSProperties,\n): JSX.Element => (\n  <div\n    key={id}\n    style={{\n      margin: `${suomifiDesignTokens.spacing.s} ${suomifiDesignTokens.spacing.l} ${suomifiDesignTokens.spacing.l} 0`,\n      lineHeight: '1rem',\n    }}\n  >\n    <div\n      style={{\n        width: '10rem',\n        height: '3rem',\n        marginBottom: suomifiDesignTokens.spacing.m,\n        background: value,\n        ...style,\n      }}\n    />\n    <div style={{ fontSize: '.8rem' }}>{label}</div>\n    <div style={{ fontSize: '.8rem' }}>{value}</div>\n    <div style={{ fontSize: '.8rem' }}>{name}</div>\n  </div>\n);\n\nconst Page = (): JSX.Element => (\n  <NamespacesConsumer ns={['colors']}>\n    {t => (\n      <Layout sideNavData={sideNavData(t)}>\n        <SEO title={t('title')} />\n        <Heading.h1>{t('title')}</Heading.h1>\n\n        <Paragraph.lead>\n          <Text.lead>{t('intro')}</Text.lead>\n        </Paragraph.lead>\n\n        <NoteBox title={t('note.title')} items={t('note.items')} />\n\n        {t('sections').map((section, index) => (\n          <Section\n            key={index}\n            mainTitle={section.title}\n            paragraphs={section.paragraphs}\n            links={section.links}\n          />\n        ))}\n\n        {colorCategories.map(item => (\n          <ComponentDescription\n            key={item.id}\n            mainTitle={t(`${item.id}.title`)}\n            description={t(`${item.id}.description`)}\n            exampleFirst={false}\n            noCode\n          >\n            <ComponentExample\n              style={{\n                padding: 0,\n                justifyContent: 'flex-start',\n                background: 'none',\n                border: 'none',\n              }}\n            >\n              {item.colors.map((color, index) =>\n                getExampleColor(\n                  `${item.id}.${index}`,\n                  color.name,\n                  color.value,\n                  t(`${color.name}.label`),\n                  { border: color.border },\n                ),\n              )}\n            </ComponentExample>\n          </ComponentDescription>\n        ))}\n      </Layout>\n    )}\n  </NamespacesConsumer>\n);\n\nexport default withI18next()(Page);\n\nexport const query = graphql`\n  query($lng: String!) {\n    ...AllLocalesFragment\n  }\n`;\n"],"sourceRoot":""}